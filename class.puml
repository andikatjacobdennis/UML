@startuml
package Organization {

    ' Abstract class Person
    abstract class Person {
        +string Name
        -int age
        #decimal salary
        #string EmployeeId
        +SetAge(age: int)
        internal PrintEmployeeDetails()
        {abstract} +Work()
    }

    ' Concrete class Employee
    class Employee {
        +Work()
        +DisplayEmployeeInfo()
    }

    ' Interface IWorker with Generics
    interface IWorker<T> {
        +GetWorkDetails(employeeId: int): T
    }

    ' Concrete class Manager
    class Manager {
        +AddEmployee(employeeId: int)
        +Work()
        +GetWorkDetails(employeeId: int): string
        +onEmployeeAdded: Signal
        -employees: List<Employee>
    }

    ' Concrete class TeamLead, a type of Manager
    class TeamLead {
        +ConductMeeting()
        +Work()
    }

    ' Event Args Class
    class EmployeeEventArgs {
        +int EmployeeId
    }

    ' Interface IEventPublisher for event handling
    interface IEventPublisher {
        +onEmployeeAdded: Signal
    }

    ' Class Department that uses Composition with Employee
    class Department {
        +DepartmentName: string
        +AddEmployee(employee: Employee)
        -employees: List<Employee>
    }

    ' Class EmployeeManager that subscribes to events
    class EmployeeManager {
        +SubscribeToEvent(manager: Manager)
        +Manager_OnEmployeeAdded(sender: object, e: EmployeeEventArgs)
    }

    ' Class Payroll that uses Dependency with EmployeeManager
    class Payroll {
        +ProcessPayroll(employee: Employee)
        +GenerateReport()
        -employeeManager: EmployeeManager
    }

    ' Class Address representing composition with Employee
    class Address {
        +Street: string
        +City: string
        +PostalCode: string
    }

    ' Relationships between classes
    Person <|-- Manager
    Person <|-- Employee
    Manager <|-- TeamLead
    Manager ..|> IWorker
    Manager ..|> IEventPublisher
    EmployeeManager --|> IEventPublisher
    Manager --> "*" EmployeeEventArgs : creates
    Manager --> "*" EmployeeEventArgs : raises event
    Manager --> "*" Employee : manages
    EmployeeManager ..> Manager : subscribes to
    Department *-- "1..*" Employee : manages
    Department "1" *-- "*" Address : has
    Payroll ..> EmployeeManager : depends on

    ' Additional Relationship Types
    Employee "1" o-- "*" Address : lives at
    Employee ..> Payroll : depends on

    ' Signals (Events)
    IEventPublisher <|.. EmployeeManager : subscribes to
    Manager -- "1..*" EmployeeManager : publishes event
    Manager --> "*" Employee : manages employees
    IEventPublisher ..> EmployeeEventArgs : uses

}
@enduml
