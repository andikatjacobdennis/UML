@startuml

title User Sign-In Process Flow (UML 2.5)

actor User as user
participant "formSign.cs" as form <<Form Controller>>
participant "Sign.cs" as controller <<(C,#ADD1B2) Form Controller>>
participant "Secure.cs" as secure <<(C,#ADD1B2) Authentication>>
participant "Security.cs" as security <<(C,#ADD1B2) Security>>
database "UserDB" as database <<Database>>

autonumber 1

box "Web Application" #LightBlue
    participant form
end box

box "C# Server" #LightGreen
    participant controller
    participant secure
    participant security
    participant database
end box

== User Initiates Sign-In ==

user -> form : submitSignIn()
activate form
form -> form : getParameters()
form -> form : result = checkFields()

note right of form
    Verifies form fields for completeness.
end note

' New page or section for main authentication flow
== Authentication Flow ==

autonumber 10

alt "Fields Validation Passed" result

    form -> controller : formSignIn(JSON: { "email": email, "password": pwd })
    activate controller
    
    loop "Retry Authentication (Max 3 Attempts)"
        controller -> controller : result = checkFields()
        
        autonumber 20
        
        alt "Authentication Successful" result
            controller -> secure : Secure.Authenticate(JSON: { "email": email, "password": pwd, "remember": true })
            activate secure
            
            note right of secure
                Asynchronously authenticates user credentials.
            end note
            
            secure -> database : Query User Data (email)
            activate database
            
            database --> secure : User Data (if found)
            deactivate database
            
            secure ->> security : OnAuthenticated(User Data)
            activate security
            
            note right of security
                Security validation completed with retrieved user data.
            end note
            
            security --> form : renderJSON(0)  ' Synchronous response
            deactivate security
            deactivate secure
            deactivate controller
            form --> user : display main page
            deactivate form
            
            note over user
                User sees the main page on successful login.
            end note
            
        else "Authentication Failed"
            controller --> form : renderJSON(1)
            deactivate controller
            form --> user : display error
            
            note over user
                Error message is displayed on failed login.
            end note
            
        end
    end
    
else "Fields Validation Failed"
    form --> user : display error
    deactivate form
end

@enduml
