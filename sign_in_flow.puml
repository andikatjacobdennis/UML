@startuml

title User Sign-In Process Flow (UML 2.5)

actor User as user
boundary "formSign.cs" as form <<Boundary>>
control "Sign.cs" as controller <<Control>>
control "Secure.cs" as secure <<Control>>
control "Security.cs" as security <<Control>>
entity "UserDB" as database <<Entity>>
control "Log.cs" as log <<Control>>

autonumber 1

box "Web Application" #LightBlue
    boundary form
end box

box "C# Server" #LightGreen
    control controller
    control secure
    control security
    control log
end box

box "Database Server" #LightYellow
    entity database
end box

== User Initiates Sign-In ==

user -> form : submitSignIn()
activate form
form -> form : getParameters()
form -> form : result = checkFields()

note right of form
    Verifies form fields for completeness.
end note

== Authentication Flow ==

autonumber 10

alt "Fields Validation Passed" result

    form -> controller : formSignIn(JSON: { "email": email, "password": pwd })
    activate controller
    
    loop "Retry Authentication (Max 3 Attempts)"
        controller -> controller : result = checkFields()
        
        autonumber 20
        
        alt "Authentication Successful" result
            controller -> secure : Secure.Authenticate(JSON: { "email": email, "password": pwd, "remember": true })
            activate secure
            
            note right of secure
                Asynchronously authenticates user credentials.
            end note
            
            secure -> database : Query User Data (email)
            activate database
            
            database --> secure : User Data (if found)
            deactivate database
            
            secure ->> security : OnAuthenticated(User Data)
            activate security
            
            note right of security
                Security validation completed with retrieved user data.
            end note
            
            security --> form : renderJSON(0)  ' Synchronous response'
            deactivate security
            deactivate secure
            deactivate controller
            form --> user : display main page
            deactivate form
            
            log -> log : Serilog.Information("Success - User authenticated.")
            
            note over user
                User sees the main page on successful login.
            end note
            
        else "Authentication Failed"
            controller --> form : renderJSON(1)
            deactivate controller
            form --> user : display error
            
            log -> log : Serilog.Warning("Failure - Invalid credentials.")
            
            note over user
                Error message is displayed on failed login.
            end note
            
        end
    end
    
else "Fields Validation Failed"
    form --> user : display error
    deactivate form
    
    log -> log : Serilog.Warning("Failure - Incomplete fields.")
end

== Database Specification ==

note right of database
    Database Version: SQL Server 2019
end note

@enduml
